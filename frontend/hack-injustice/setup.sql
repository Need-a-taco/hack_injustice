-- Function to handle new user creation
create function public.handle_new_user()
returns trigger as $$
declare username text;
begin
  select substring(new.email from '(.*)@') into username;
  insert into public.profiles (id, email, display_name, is_merchant)
  values (new.id, new.email, username, false);
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to check if a user is a merchant
create function public.is_merchant()
returns boolean
language plpgsql
security definer
as $$
declare
  is_merchant boolean;
begin
  select coalesce(profiles.is_merchant, false)
  into is_merchant
  from profiles
  where profiles.id = auth.uid();
  return is_merchant;
end
$$;

-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  email text unique not null,
  display_name text not null,
  is_merchant boolean not null default false 
);

-- Enable Row Level Security (RLS) on profiles
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Create a table for markets (only merchants can be authors)
create table market (
  id int generated by default as identity primary key,
  market_name text unique not null,
  address_name text,
  opening_hours text, 
  description text,
  supports_snap boolean not null default false, 
  website text,
  author uuid not null references profiles(id)
);

-- Trigger to ensure only merchants can be authors
create function public.ensure_merchant_author()
returns trigger as $$
declare
  is_merchant boolean;
begin
  select profiles.is_merchant into is_merchant
  from profiles
  where profiles.id = new.author;
  
  if is_merchant = false then
    raise exception 'Only merchants can create market entries';
  end if;
  
  return new;
end;
$$ language plpgsql security definer;

create trigger enforce_merchant_author
  before insert on public.market
  for each row execute procedure public.ensure_merchant_author();

-- Enable Row Level Security (RLS) on market
alter table market enable row level security;

create policy "Markets are viewable by everyone." on market
  for select using (true);

create policy "Merchants can insert their own postings." on market
  for insert with check (public.is_merchant() AND auth.uid() = author);

create policy "Merchants can update their created postings." on market
  for update using (public.is_merchant() AND auth.uid() = author);

create policy "Merchants can delete their created postings." on market
  for delete using (public.is_merchant() AND auth.uid() = author);

-- Prevent the author field of a market entry from being changed
create function public.prevent_author_change()
returns trigger as $$
begin
  if new.author <> old.author then
    raise exception 'Changing market author is not allowed';
  end if;
  return new;
end;
$$ language plpgsql security definer;

create trigger prevent_author_change
  before update on public.market
  for each row execute procedure public.prevent_author_change();
